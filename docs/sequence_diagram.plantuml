@startuml sequence_diagram
title FLINT ETL Processing Framework - Sequence Diagram

!define EXTRACT_COLOR #6B8EB5 
!define TRANSFORM_COLOR #7BB07E
!define LOAD_COLOR #C17878


actor User
participant "Main" as Main
participant "Runtime" as Runtime
participant "Job" as Job
participant "Extract" as Extract EXTRACT_COLOR
participant "Transform" as Transform TRANSFORM_COLOR
participant "Load" as Load LOAD_COLOR
participant "DataFrameRegistry" as Registry
participant "SparkHandler" as Spark
participant "FileHandler" as FileHandler

== Initialization & Configuration ==
User -> Main: Run with config file
activate Main
Main -> Runtime: Runtime.from_file(config_filepath)
activate Runtime

Runtime -> FileHandler: read configuration
activate FileHandler
FileHandler --> Runtime: config dictionary
deactivate FileHandler

Runtime --> Main: configured runtime
Main -> Runtime: runtime.execute_all()

== Data Processing Pipeline Execution ==
Runtime -> Job: execute()
activate Job EXTRACT_COLOR

loop for each extract
    Job -> Extract: extract()
    activate Extract EXTRACT_COLOR
    Extract -> Spark: configure Spark
    activate Spark EXTRACT_COLOR
    
    alt ExtractMethod.BATCH
        Extract -> Extract: _extract_batch()
        Extract -> Spark: read data files
        Spark --> Extract: DataFrame
    else ExtractMethod.STREAMING
        Extract -> Extract: _extract_streaming()
        Extract -> Spark: read streaming data
        Spark --> Extract: Streaming DataFrame
    end
    
    deactivate Spark
    Extract -> Registry: store DataFrame [extract.name]
    activate Registry EXTRACT_COLOR
    deactivate Registry
    Extract --> Job: completed
    deactivate Extract
end
deactivate Job

Job -> Job: _transform()
activate Job TRANSFORM_COLOR

loop for each transform
    Job -> Transform: transform()
    activate Transform TRANSFORM_COLOR
    Transform -> Registry: get upstream DataFrame
    activate Registry TRANSFORM_COLOR
    deactivate Registry
    
    loop for each function
        Transform -> Transform: apply function with arguments
        activate Transform TRANSFORM_COLOR
        Transform --> Transform: transformed DataFrame
        deactivate Transform
    end
    
    Transform -> Registry: store DataFrame [transform.name]
    activate Registry TRANSFORM_COLOR
    deactivate Registry
    Transform --> Job: completed
    deactivate Transform
end
deactivate Job

Job -> Job: _load()
activate Job LOAD_COLOR

loop for each load
    Job -> Load: load()
    activate Load LOAD_COLOR
    Load -> Registry: get upstream DataFrame
    activate Registry LOAD_COLOR
    deactivate Registry
    
    alt LoadMethod.BATCH
        Load -> Load: _load_batch()
        Load -> Spark: write data to destination
        activate Spark LOAD_COLOR
        deactivate Spark
    else LoadMethod.STREAMING
        Load -> Load: _load_streaming()
        Load -> Spark: write streaming data
        activate Spark LOAD_COLOR
        Spark --> Load: StreamingQuery
        deactivate Spark
        Load -> Registry: register streaming query
        activate Registry LOAD_COLOR
        deactivate Registry
    end
    
    Load --> Job: completed
    deactivate Load
end

deactivate Job
Job --> Main: execution completed
deactivate Job

Main --> User: Process completed
deactivate Main

@enduml