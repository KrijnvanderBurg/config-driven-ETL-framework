name: Build and Test

on:
  workflow_call:
    outputs:
      version:
        description: "Package version from pyproject.toml"
        value: ${{ jobs.build.outputs.version }}

jobs:
  build:
    name: Build Package
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Python
        uses: ./.github/actions/setup-python
        with:
          python-version: 3.13

      - name: Setup Poetry
        uses: ./.github/actions/poetry-setup

      - name: Install Dependencies
        uses: ./.github/actions/poetry-install

      - name: Build Package
        uses: ./.github/actions/poetry-build

      - name: Get version from pyproject.toml
        id: get_version
        run: |
          VERSION=$(sh ${{ github.workspace }}/.github/scripts/poetry-get-version.sh)
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 7

  test:
    name: Run Tests
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Python
        uses: ./.github/actions/setup-python
        with:
          python-version: 3.13

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Install Package
        uses: ./.github/actions/install-package

      - name: Run Unit Tests
        uses: ./.github/actions/run-pytest
        with:
          tests-path: tests/unit
          coverage-path: samara
          coverage-xml-output: coverage-unit.xml

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-unit
          path: coverage-unit.xml
          retention-days: 7

      - name: Run E2E Tests
        uses: ./.github/actions/run-pytest
        with:
          tests-path: tests/e2e
          coverage-path: samara
          coverage-xml-output: coverage-e2e.xml

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-e2e
          path: coverage-e2e.xml
          retention-days: 7

      - name: Validate Example Jobs
        run: |
          find examples -name "job.jsonc" -type f | while read job_file; do
            job_dir=$(dirname "$job_file")
            alert_file="$job_dir/alert.jsonc"
            
            if [ -f "$alert_file" ]; then
              echo "Validating: $job_file with $alert_file"
              python -m samara validate --alert-filepath "$alert_file" --runtime-filepath "$job_file"
            else
              echo "Skipping $job_file (no alert.jsonc found)"
            fi
          done
